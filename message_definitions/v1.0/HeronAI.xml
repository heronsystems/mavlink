<?xml version="1.0"?>
<mavlink>
  <include>common.xml</include>
  <include>mace_common.xml</include>
  <include>mace_mission.xml</include>
  <!-- Vendors -->
  <include>ardupilotmega.xml</include>
  <include>uAvionix.xml</include>
  <include>icarous.xml</include>

  <dialect>2</dialect>
  <!-- Note that APM specific messages should use the command id range from 150 to 250, to leave plenty of room for growth of common.xml If you prototype a message here, then you should consider if it is general enough to move into common.xml later -->
  <enums>
    <enum name="PLANE_MODE">
      <description>A mapping of the additional plane flight modes for custom_mode field of heartbeat.</description>
      <entry value="30" name="PLANE_MODE_AI_DEFLECTION"/>
    </enum>

    <enum name="MAV_FRAME">
      <description>A mapping of additional coordinate frames.</description>
      <entry value="30" name="MAV_FRAME_GLOBAL_UNKNOWN"/>
      <entry value="31" name="MAV_FRAME_LOCAL_UNKNOWN"/>
      <entry value="32" name="MAV_FRAME_BODY_ENU"/>
    </enum>

    <enum name="LOGGING_EVENT_TAGS">
      <description>These values define the type of AI events that could occur during the test evaluation.</description>
      <entry value="0" name="NEW_TEST_EVALUATION">
        <description>Denotes the start of a new test evaluation event.</description>
      </entry>
      <entry value="1" name="ROUTING_TO_INIITIALIZATION">
        <description>Beginning of routing of the aircraft to the designated initial test conditions.</description>
      </entry>
      <entry value="2" name="ENABLED_CONTROL">
        <description>Entering the phase in which the AI agent has complete control authority of the aircraft.</description>
      </entry>
      <entry value="3" name="INTERESTING_OBSERVATION">
        <description>Entering the phase in which the AI agent has complete control authority of the aircraft.</description>
      </entry>
      <entry value="4" name="ABORTED_TEST">
        <description>An event or situation had occured causing the test to be aborted.</description>
      </entry>
      <entry value="5" name="CEASING_TEST_EVALUATION">
        <description>Testing conducted under the coordinating AI_NEW_TEST_EVALUATION tag is stopping.</description>
      </entry>
      <entry value="6" name="GENERIC_ENTRY">
        <description>Generic string push to all the logging structures.</description>
      </entry>
    </enum>

    <enum name="AI_PROCEDURAL_COMMANDS">
      <description>These values define the type of AI events that could occur during the test evaluation.</description>
      <entry value="0" name="RELEASE">
        <description>Denotes release authority of the aircraft to begin AI control. This is a psuedonym to the paddle functionality mimicing real-world authority.</description>
      </entry>
      <entry value="1" name="START">
        <description>Denotes the start of a new test evaluation event.</description>
      </entry>
      <entry value="2" name="STOP">
        <description>Stops the current test evaluation event. Associated with the appropriate termination conditions have been met and autonomously validated the conditions required.</description>
      </entry>
      <entry value="3" name="ABORT">
        <description>Denotes a user interrupted test event. Often associated with conditions that were either deemed unsafe or unsatisfactory per the evaluating personnel.</description>
      </entry>
    </enum>

    <enum name="AI_TERMINATION_CRITERIA">
      <description>These values create the termination criteria for an evaluation event.</description>
      <entry value="0" name="RUNTIME">
        <description>Denotes that the evaluation event should last for a specified duration of time. </description>
      </entry>
      <entry value="1" name="STEADY_STATE">
        <description>Denotes that the module can evaluate if a steady-state condition has been reached. This is often assoiciated with a performance evaluation type of test procedure.</description>
      </entry>
      <entry value="2" name="CLOSURE">
        <description>Denotes a termination criteria that should an agent close in on a specified agent and range the </description>
      </entry>
      <entry value="3" name="INFINTIE">
        <description>Denotes a user interrupted test event. Often associated with conditions that were either deemed unsafe or unsatisfactory per the evaluating personnel.</description>
      </entry>
    </enum>

    <enum name="MAV_CMD">
      <description>Extending the commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide</description>
      <entry value="31015" name="SET_SURFACE_DEFLECTION_NORMALIZED" hasLocation="false" isDestination="false">
        <description>User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.</description>
        <param index="1">Bitmask defining the control authorities on the axis that should remain stabilized or tracking an explicit condition. This would imply we can set the aircraft on a course or attitude state that is maintained by an inner-loop control law while evaluating the other axes under AI control.</param>
        <param index="2">elevator_deflection: Normalized x-axis value between -1 and 1 that corresponds to the elevators of the vehicle.</param>
        <param index="3">aileron_deflectiond: Normalized y-axis value between -1 and 1 that corresponds to the ailerons of the vehicle.</param>
        <param index="4">rudder_deflectiond: Normalized r-axis value between -1 and 1 that corresponds to the rudders of the vehicle.</param>
        <param index="5">throttle_deflection: Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)</param>
        <param index="6">User defined</param>
        <param index="7">User defined</param>
      </entry>
    </enum>
  </enums>

  <messages>

    <message id="12000" name="MACE_HEARTBEAT">
      <description>The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).</description>
      <field type="uint8_t" name="protocol" enum="MAV_TYPE">Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)</field>
      <field type="uint8_t" name="type" enum="MAV_TYPE">Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)</field>
      <field type="uint8_t" name="autopilot" enum="MAV_AUTOPILOT">Autopilot type / class. defined in MAV_AUTOPILOT ENUM</field>
      <field type="uint8_t" name="vehicle_mode">The flight mode in its enumerated form. This must be cast per the type of vehicle it is.</field>
      <field type="uint8_t" name="vehicle_armed">Boolean describing whether(T=1) or not(F=0) the vehicle is armed.</field>
      <field type="uint8_t" name="mission_state">Defines the current state of the vehicle mission. Useful for determing the next state of the vehicle per mission state.</field>
      <field type="uint8_t" name="mace_companion">Boolean describing whether(T=1) or not(F=0) the vehicle is MACE companion equipped.</field>
      <field type="uint8_t_mavlink_version" name="mavlink_version">MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version</field>
      <field type="uint8_t" name="mavlinkID"></field>
    </message>

    <message id="12001" name="VEHICLE_SYNC">
      <description>This initiates a sync request to enable the receiving mace instance to begin dumping relevant data needed to reconstruct vehicles current state.</description>
      <field type="uint8_t" name="target_system">System ID</field>
    </message>

    <message id="12002" name="AI_EXECUTE_PROCEDURAL">
      <description>Generic writer enabling 3rd party software sources to </description>
      <field type="uint8_t" name="procedural_type" enum="AI_PROCEDURAL_COMMANDS">The type of event to be performed.</field>
    </message>

    <message id="12003" name="WRITE_EVENT_TO_LOG">
      <description>Generic writer enabling 3rd party software sources to </description>
      <field type="uint8_t" name="event_type" enum="LOGGING_EVENT_TAGS">The type of event associated with the tag information.</field>
      <field type="char[50]" name="text">User defined descriptor useful for describing the event.</field>
    </message>

  </messages>

</mavlink>
